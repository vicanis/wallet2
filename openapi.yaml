openapi: 3.0.3
info:
  title: Personal accounting app API
  description: |-
    This is an API for the wallet2
  version: 1.0.11
externalDocs:
  description: Github repository
  url: https://github.com/vicanis/wallet2
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: invitation
    description: Invitation to the account
  - name: category
    description: Categories of expense or income
paths:
  /invitation/{token}:
    get:
      tags:
        - invitation
      summary: Get invitation data
      parameters:
        - name: token
          in: path
          description: Invitation token
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
  /invitation:
    post:
      tags:
        - invitation
      summary: Create invitation
      responses:
        200:
          description: Successful operation
        500:
          description: Operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationError'
    delete:
      tags:
        - invitation
      summary: Delete invitation for current user
      responses:
        200:
          description: Successful operation
        500:
          description: Operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationError'
    patch:
      tags:
        - invitation
      summary: Handle invitation membership
      parameters:
        - name: action
          in: query
          description: Action type
          required: true
          schema:
            type: string
            default: 'join'
            enum: ['join', 'drop']
            nullable: true
        - name: token
          in: query
          description: Invitation token
          schema:
            type: string
      responses:
        200:
          description: Successful operation
        500:
          description: Operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationError'
  /get_categories:
    get:
      tags:
        - category
      summary: Get category list
      parameters:
        - name: mode
          in: query
          description: Output format
          schema:
            type: string
            enum: ['plain']
            nullable: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        500:
          description: Operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationError'
  /get_category:
    get:
      tags:
        - category
      summary: Get category data
      parameters:
        - name: id
          in: query
          description: Category id
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        500:
          description: Operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationError'
  /set_category:
    post:
      tags:
        - category
      summary: Update category (or create new one)
      requestBody:
        description: Category data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        200:
          description: Successful operation
        500:
          description: Operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationError'
  /del_category:
    get:
      tags:
        - category
      summary: Delete category
      parameters:
        - name: id
          in: query
          description: Category id
          schema:
            type: string
      responses:
        200:
          description: Successful operation
        500:
          description: Operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationError'
  /sort_category:
    post:
      tags:
        - category
      summary: Update category list items order
      requestBody:
        $ref: '#/components/requestBodies/CategorySortList'
      responses:
        200:
          description: Successful operation
        500:
          description: Operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationError'
components:
  schemas:
    OperationError:
      type: string
      example: "Error description"
    Invitation:
      type: object
      properties:
        token:
          type: string
        created:
          type: string
          format: date-time
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Category:
      type: object
      properties:
        type:
          type: string
          enum: ['expense', 'income']
          example: 'expense'
        name:
          type: string
        icon:
          type: string
          nullable: true
        color:
          type: string
          nullable: true
        plan:
          type: object
          properties:
            value:
              type: number
              nullable: true
            currency:
              type: string
              nullable: true
        order:
          type: number
          nullable: true
        other:
          type: boolean
          default: false
        user:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
  requestBodies:
    CategorySortList:
      description: Category sort data
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                order:
                  type: number
